<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
				         http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
				         http://www.springframework.org/schema/context
				         http://www.springframework.org/schema/context/spring-context-3.0.xsd
				         http://www.springframework.org/schema/tx
				         http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
				         http://www.springframework.org/schema/aop 
				         http://www.springframework.org/schema/aop/spring-aop-3.0.xsd">

	<!--将Shiro一bean的形式交给spring管理  -->
	 <bean id="lifeCycleBeanProcessor" 
	 class="org.apache.shiro.spring.LifecycleBeanPostProcessor"></bean>
	 
	<!--为shiro形成切面，将来以AOP的形式进行调用  -->
	 <bean 
	 class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator"
	 depends-on="lifeCycleBeanProcessor">
	 	<!--默认代理是jdk的，以下的代理是cglib生成代理对象，有无接口都可以，代理对象是目标对象的子类
	 	Shiro中必须以cglib的形成代理对象，，该代理对象仅为以上bean生成代理对象depends-on
	 	  -->
	 	<property name="proxyTargetClass" value="true"></property>
	 </bean>
	
	<!--以cglib的形式生成Aop  -->
	<aop:aspectj-autoproxy proxy-target-class="true"></aop:aspectj-autoproxy>
  	
  	<!--该对象是Shiro中的最重要的模块.  -->
	 <bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
		<!--必须注入Realm，提供真实的信息，方便判断  -->
	 	<property name="realm" ref="AuthRealm"></property>
	 </bean>
	 <!--！！！！！！自定义realm 提供用户真实的数据  -->
	 <bean id="AuthRealm" class="com.foodisgod.shiro.AuthRealm">
	 
	 	<!--引入自定义的加密器  -->
	 	<property name="credentialsMatcher" ref="authCredential"></property>
	 </bean>
	<bean id="authCredential" class="com.foodisgod.shiro.AuthCredential"></bean>
	
	<!--配置权限认证的通知，形成切面  -->
	 <bean  class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
	 	<!--注入安全中心，以后做校验  -->
	 	<property name="securityManager" ref="securityManager"></property>
	 </bean>
	 
	<!--该过滤应该放在web容器中，如果放在spring中将不起作用，-->	
	 <bean id="shiroFilter" 
	 	class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
	 	
	 	<!--注入安全中心  -->
	 	<property name="securityManager" ref="securityManager"></property>
	 	
	 	<!--只要没有经过认证的请求，都会拦截到指定页面-->
	 	<property name="loginUrl" value="/index.jsp"></property>
	 
	 	<property name="filterChainDefinitions">
		 	<value>
		 	<!--如果什么都不写表示无需拦截，直接跳转
		 		/*表示只拦截请求，不拦截静态资源
		 		/**拦截全部资源
		 		authc拦截
		 		anon放行
		 	-->
		 		<!-- /toLogin.action = anon
		 		/login.action = anon
		 		/staticfile/** = anon
		 		/**=authc -->
		 	</value>
	 	</property>
	 
	 </bean>
	 
	 
</beans> 